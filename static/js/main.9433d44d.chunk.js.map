{"version":3,"sources":["components/Map.js","components/TableFormData.js","App.js","index.js"],"names":["Map","state","background","id","this","setState","style","height","width","backgroundSize","star","myIcon","L","Icon","iconUrl","iconRetinaUrl","popupAnchor","iconSize","styles","fillColor","weight","opacity","color","dashArray","fillOpacity","img","marginTop","tiles","limeOptions","position","className","MapContainer","center","scrollWheelZoom","zoom","TileLayer","attribution","url","props","buttonId","pointData","map","place","point","geometry","coordinates","Marker","icon","Popup","properties","name","desc","src","picture1","alt","picture2","lineData","lines","Polyline","positions","pathOptions","GeoJSON","data","polygonData","onClick","setBackground","React","Component","TableFormData","scope","item","type","features","App","showLinesData","a","fetch","response","json","showPointsData","showPolygonData","polygondata","linkstyle","textDecoration","fontWeight","letterSpacing","fontSize","setButton","to","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9433d44d.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { MapContainer, TileLayer, Marker,Popup, Polyline, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\n//import marker from '../assets/images/star-solid.svg';\r\n\r\n\r\nclass Map extends React.Component{\r\n    state = {\r\n        background:null\r\n    }\r\n    setBackground(id) {\r\n        this.setState({ background: id });\r\n    }\r\n    render(){\r\n        const style = {\r\n            height: '98vh',\r\n            width: '100%',\r\n            backgroundSize:'cover',\r\n        }\r\n        const star = 'https://th.bing.com/th/id/R.f3de8ea5dccde14634b2ef54b72551bf?rik=wah7i3e7uYA65g&pid=ImgRaw&r=0'\r\n        const myIcon = new L.Icon({\r\n        iconUrl: star,\r\n        iconRetinaUrl: star,\r\n        popupAnchor: [-0, -0],\r\n        iconSize:[10,10],\r\n        background: 'orange',\r\n    });\r\n      const styles= {\r\n        fillColor:'orange',\r\n        weight: 0.5,\r\n        opacity: 1,\r\n        color:'orange',\r\n        dashArray: 1,\r\n        fillOpacity: 0.7\r\n    }\r\n    const img ={\r\n        height:'100%',\r\n        width:\"100px\",\r\n        marginTop:\"5%\"\r\n    }\r\n    const tiles ={\r\n        color:'orange'\r\n    }\r\n    const limeOptions = { color: 'orange', weight:2, }\r\n    const position = [-3.919907, 29.751335]\r\n        return(\r\n            <div className='map'>\r\n                {this.state.background ===1 &&   <MapContainer center={position} scrollWheelZoom={true}  zoom={3} style={style}>\r\n                    <TileLayer style ={tiles}\r\n                        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\r\n                    />\r\n                    {this.props.buttonId === 0 && <div className=\"container\">\r\n                    {this.props.pointData.map( place => {\r\n                        const point = [place.geometry.coordinates[1], place.geometry.coordinates[0]];\r\n                        return (\r\n                            <Marker position={point} key={place.id} icon={myIcon} >\r\n                                <Popup>\r\n                                    <div className=\"popupdiv\">\r\n                                    <div>Name: {place.properties.name}</div>\r\n                                    <div>{place.properties.desc}</div>\r\n                                    <div><img src={place.properties.picture1} style={img} alt={place.properties.name}/></div>\r\n                                    <div><img src={place.properties.picture2} style={img} alt={place.properties.name}/></div>  \r\n                                    </div>\r\n                                </Popup>\r\n                            </Marker>\r\n                        );\r\n                    })} </div>}\r\n                    {this.props.buttonId === 1 && <div className=\"container\">\r\n                    {this.props.lineData.map((lines) => {\r\n                     return <Polyline key={lines.id} positions={lines.geometry.coordinates} pathOptions={limeOptions} />\r\n                        })}\r\n                    </div>}\r\n                    {this.props.buttonId === 2 && <div className=\"container\">\r\n                      <GeoJSON data={this.props.polygonData} style={styles}/>\r\n                    </div>}\r\n                    <div className='toggle'>\r\n                    <li className='switch' onClick={()=>{this.setBackground(1)}}>Openstreetmap </li>\r\n                </div>\r\n                <div className='toggle2'>\r\n                    <li className='switch' onClick={()=>{this.setBackground(2)}}>USGS_USImageryTopo</li>\r\n                </div>\r\n                </MapContainer> }\r\n                {this.state.background ===2 &&   <MapContainer center={position} zoom={3} scrollWheelZoom={true}  style={style}>\r\n                    <TileLayer style ={tiles}\r\n                        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n                        url='https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryTopo/MapServer/tile/{z}/{y}/{x}'\r\n                    />\r\n                    {this.props.buttonId === 0 && <div className=\"container\">\r\n                    {this.props.pointData.map( place => {\r\n                        const point = [place.geometry.coordinates[1], place.geometry.coordinates[0]];\r\n                        return (\r\n                            <Marker position={point} key={place.id} icon={myIcon} >\r\n                                <Popup>\r\n                                    <div className=\"popupdiv\">\r\n                                    <div>Name: {place.properties.name}</div>\r\n                                    <div>{place.properties.desc}</div>\r\n                                    <div><img src={place.properties.picture1} style={img} alt={place.properties.name}/></div>\r\n                                    <div><img src={place.properties.picture2} style={img} alt={place.properties.name}/></div>  \r\n                                    </div>\r\n                                </Popup>\r\n                            </Marker>\r\n                        );\r\n                    })} </div>}\r\n                    {this.props.buttonId === 1 && <div className=\"container\">\r\n                    {this.props.lineData.map((lines) => {\r\n                     return <Polyline key={lines.id} positions={lines.geometry.coordinates} pathOptions={limeOptions} />\r\n                        })}\r\n                    </div>}\r\n                    {this.props.buttonId === 2 && <div className=\"container\">\r\n                      <GeoJSON data={this.props.polygonData} style={styles}/>\r\n                    </div>}\r\n                    <div className='toggle'>\r\n                    <li className='switch' onClick={()=>{this.setBackground(1)}}>Openstreetmap </li>\r\n                </div>\r\n                <div className='toggle2'>\r\n                    <li className='switch' onClick={()=>{this.setBackground(2)}}>USGS_USImageryTopo</li>\r\n                </div>\r\n                </MapContainer> }\r\n                {this.state.background !==2 &&  this.state.background !==1 &&  <MapContainer center={position} zoom={3} scrollWheelZoom={true}  style={style}>\r\n                    <TileLayer\r\n                        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n                        url='https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png'\r\n                    />\r\n                    {this.props.buttonId === 0 && <div className=\"container\">\r\n                    {this.props.pointData.map( place => {\r\n                        const point = [place.geometry.coordinates[1], place.geometry.coordinates[0]];\r\n                        return (\r\n                            <Marker position={point} key={place.id} icon={myIcon} >\r\n                                <Popup>\r\n                                    <div className=\"popupdiv\">\r\n                                    <div>Name: {place.properties.name}</div>\r\n                                    <div>{place.properties.desc}</div>\r\n                                    <div><img src={place.properties.picture1} style={img} alt={place.properties.name}/></div>\r\n                                    <div><img src={place.properties.picture2} style={img} alt={place.properties.name}/></div>  \r\n                                    </div>\r\n                                </Popup>\r\n                            </Marker>\r\n                        );\r\n                    })} </div>}\r\n                    {this.props.buttonId === 1 && <div className=\"container\">\r\n                    {this.props.lineData.map((lines) => {\r\n                     return <Polyline key={lines.id} positions={lines.geometry.coordinates} pathOptions={limeOptions} />\r\n                        })}\r\n                    </div>}\r\n                    {this.props.buttonId === 2 && <div className=\"container\">\r\n                      <GeoJSON data={this.props.polygonData} style={styles}/>\r\n                    </div>}\r\n                <div className='toggle'>\r\n                    <li className='switch' onClick={()=>{this.setBackground(1)}}>Openstreetmap </li>\r\n                </div>\r\n                <div className='toggle2'>\r\n                    <li className='switch' onClick={()=>{this.setBackground(2)}}>USGS_USImageryTopo</li>\r\n                </div>\r\n                </MapContainer> } \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\nclass TableFormData extends React.Component{\r\n   \r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.props.buttonId === 0 && <div className=\"container\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">id</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Description</th>\r\n                        <th scope=\"col\">coordinates</th>\r\n                    </tr>\r\n                    </thead>\r\n                <tbody>{\r\n                        this.props.pointData.map( item => (\r\n                            <tr key={item.id}>\r\n                                <td>{item.id}</td>\r\n                                <td>{item.geometry.type}</td>\r\n                                <td>{item.properties.name}</td>\r\n                                <td>{item.properties.desc}</td>\r\n                                <td>{item.geometry.coordinates}</td>\r\n                            </tr>\r\n                        ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>}\r\n                {this.props.buttonId === 1 && <div className=\"container\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">id</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Description</th>\r\n                        <th scope=\"col\">coordinates</th>\r\n                    </tr>\r\n                    </thead>\r\n                <tbody>{\r\n                        this.props.lineData.map( item => (\r\n                            <tr key={item.id}>\r\n                                <td>{item.id}</td>\r\n                                <td>{item.geometry.type}</td>\r\n                                <td>{item.properties.name}</td>\r\n                                <td>{item.properties.desc}</td>\r\n                                <td>{item.geometry.coordinates}</td>\r\n                            </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>}\r\n            {this.props.buttonId === 2 && <div className=\"container\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">id</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Description</th>\r\n                        <th scope=\"col\">coordinates</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>{\r\n                        this.props.polygonData.features.map( item => (\r\n                            <tr key={item.id}>\r\n                                <td>{item.id}</td>\r\n                                <td>{item.geometry.type}</td>\r\n                                <td>{item.properties.name}</td>\r\n                                <td>{item.properties.desc}</td>\r\n                                <td>{item.geometry.coordinates}</td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </tbody>\r\n                </table>\r\n            </div>}\r\n            {this.props.buttonId !== 0 && this.props.buttonId !== 1 && this.props.buttonId !== 2 && <div className=\"container\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">id</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Description</th>\r\n                        <th scope=\"col\">coordinates</th>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>}\r\n           </div>\r\n        );\r\n        \r\n    }\r\n}\r\nexport default TableFormData;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Route, Routes,Link} from \"react-router-dom\";\r\nimport Map from './components/Map';\r\nimport TableFormData from './components/TableFormData'\r\n\r\n\r\nclass App extends React.Component{\r\n  state ={\r\n    pointData:[],\r\n    lineData:[],\r\n    polygonData:[],\r\n    buttonId:null\r\n  }\r\n\r\n  showLinesData = async ()=>{\r\n    const response = await fetch(\"http://collectdata2021.herokuapp.com/lineapi\")\r\n    const lineData = await response.json();\r\n    this.setState({lineData:lineData.features})\r\n    }\r\n  showPointsData = async () => {\r\n    const response = await fetch(\"http://collectdata2021.herokuapp.com/pointapi\")\r\n    const pointData = await response.json();\r\n    this.setState({pointData:pointData.features})    \r\n  } \r\n   \r\n  showPolygonData = async()=>{\r\n        const response = await fetch(\"http://collectdata2021.herokuapp.com/polygonapi\")\r\n        const polygondata = await response.json();\r\n        this.setState({polygonData:polygondata})\r\n    }\r\n\r\n    setButton(id) {\r\n      this.setState({ buttonId: id });\r\n  }\r\n  render(){\r\n    const linkstyle ={\r\n    color:'white',\r\n    background:'orangered',\r\n    textDecoration:'none',\r\n    fontWeight:'400',\r\n    letterSpacing:1,\r\n    fontSize:16,\r\n\r\n  }\r\n    return(\r\n      <div className=''>\r\n        <div className=\"row\">\r\n          <div className=\"col-2\">\r\n               <ul className='list-group list-group-flush'>\r\n                  <li className='list-group-item text-muted mt-5'><h5>Data types</h5></li>\r\n                  <li className='list-group-item' onClick={() => { this.setButton(0); this.showPointsData()}}>points</li>\r\n                  <li className='list-group-item' onClick={() => { this.setButton(1); this.showLinesData()}}>Lines</li>\r\n                  <li className='list-group-item' onClick={() => { this.setButton(2); this.showPolygonData()}}>Polygons</li>\r\n               </ul>\r\n          </div>\r\n          <div className=\"col-10\">\r\n            <Router>\r\n              <div className=\"App\">\r\n                <div className='buttons2'>\r\n                    <button type=\"button\" className='btn  btn-sm'><Link to=\"/\" style={linkstyle}>display map</Link></button>\r\n                 </div>\r\n                 <div className='buttons'>\r\n                    <button type=\"button\" className='btn  btn-sm'><Link to=\"/table\" style={linkstyle}>display table</Link></button>\r\n                 </div>\r\n                <Routes>\r\n                  <Route exact path='/' element={< Map pointData={this.state.pointData} lineData={this.state.lineData} polygonData={this.state.polygonData} buttonId={this.state.buttonId}/>}>\r\n                  </Route>\r\n                  <Route exact path='/table' element={< TableFormData pointData={this.state.pointData} lineData={this.state.lineData} polygonData={this.state.polygonData} buttonId={this.state.buttonId}/>}></Route>\r\n                </Routes>\r\n              </div>\r\n           </Router>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}